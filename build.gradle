plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.lubaszka.salarycalculator'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springAiVersion', "1.0.0-M4")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-test'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "org.postgresql:postgresql:${postgresqlVersion}"
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

test {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.compilerArgs << "-Amapstruct.defaultComponentModel=spring"
}

jacoco {
    toolVersion = "${jacocoPluginVersion}"
}

def excludedClasses = [
		'**/api/**',
		'**/config/**',
		'**/exception/**',
		'**/mapper/**',
		'**/model/**',
		'com/lubaszka/salarycalculator/SalaryCalculatorApplication.class'
]

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: excludedClasses)
		}))
	}
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
				minimum = 0.70
            }
        }
    }
}

test.finalizedBy jacocoTestReport


